{"version":3,"sources":["Components/assets/logo.png","Components/Nav/RightNav.jsx","Components/Nav/Burger.jsx","Components/Nav/Navbar.jsx","Components/App.jsx","serviceWorker.js","index.js","Components/assets/loader.png"],"names":["module","exports","Ul","styled","ul","open","li","link","text","RightNav","map","objLink","i","href","StyledBurger","div","Burger","useState","setOpen","onClick","Nav","nav","Navbar","className","src","logo","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,kC,uwBCG3C,IAAMC,EAAKC,IAAOC,GAAV,KAkBS,qBAAGC,KAAkB,gBAAkB,sBAYlDC,EAAK,CACP,CACIC,KAAM,IACNC,KAAM,QAEV,CACID,KAAM,YACNC,KAAM,YAEV,CACID,KAAM,SACNC,KAAM,YAEV,CACID,KAAM,WACNC,KAAM,eAgBCC,EAZE,SAAC,GAAc,IAAZJ,EAAW,EAAXA,KAChB,OACI,kBAACH,EAAD,CAAIG,KAAMA,GAEFC,EAAGI,KAAI,SAACC,EAASC,GACb,OAAQ,4BAAI,uBAAGC,KAAMF,EAAQJ,MAAOI,EAAQH,Y,kpBCrDhE,IAAMM,EAAeX,IAAOY,IAAV,KAgBM,qBAAGV,KAAkB,OAAS,UAKnC,qBAAGA,KAAkB,gBAAkB,eAGvC,qBAAGA,KAAkB,mBAAqB,mBAC5C,qBAAGA,KAAkB,EAAI,KAGvB,qBAAGA,KAAkB,iBAAmB,eAmB5CW,EAdA,WAAO,IAAD,EACOC,oBAAS,GADhB,mBACVZ,EADU,KACJa,EADI,KAGjB,OACI,oCACI,kBAACJ,EAAD,CAAcT,KAAMA,EAAMc,QAAS,kBAAMD,GAASb,KAC9C,8BACA,8BACA,+BAEJ,kBAAC,EAAD,CAAUA,KAAMA,M,8RC1C5B,IAAMe,EAAMjB,IAAOkB,IAAV,KAyBMC,EAXA,WACb,OACE,kBAACF,EAAD,KACE,yBAAKG,UAAU,QACb,yBAAKA,UAAU,SAASC,IAAKC,IAAMC,IAAI,UAEzC,kBAAC,EAAD,QCHSC,MAjBf,WACE,OACE,yBAAKJ,UAAU,OACb,kBAAC,EAAD,MACA,4BAAQA,UAAU,cAChB,2CAGA,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,qDCFYE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5B/C,EAAOC,QAAU,IAA0B,qC","file":"static/js/main.e4044d8e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.dc752b73.png\";","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Ul = styled.ul`\r\n  list-style: none;\r\n  display: flex;\r\n  flex-flow: row nowrap;\r\n  li {\r\n    padding: 18px 10px;\r\n  }\r\n\r\n  a{\r\n    text-decoration: none;\r\n    color:#000000;\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    z-index:1;\r\n    flex-flow: column nowrap;\r\n    background-color: #ffff;\r\n    position: fixed;\r\n    transform: ${({ open }) => open ? 'translateX(0)' : 'translateX(100%)'};\r\n    top: 0;\r\n    right: 0;\r\n    height: 100vh;\r\n    width: 300px;\r\n    padding-top: 3.5rem;\r\n    transition: transform 0.3s ease-in-out;\r\n    li {\r\n      color:#000000;\r\n    }\r\n  }\r\n`;\r\nconst li = [\r\n    {\r\n        link: \"/\",\r\n        text: \"Home\"\r\n    },\r\n    {\r\n        link: \"/products\",\r\n        text: \"Products\"\r\n    },\r\n    {\r\n        link: \"/about\",\r\n        text: \"About Us\"\r\n    },\r\n    {\r\n        link: \"/contact\",\r\n        text: \"Contact Us\"\r\n    }\r\n];\r\n\r\nconst RightNav = ({ open }) => {\r\n    return (\r\n        <Ul open={open}>\r\n            {\r\n                li.map((objLink, i) => {\r\n                    return (<li><a href={objLink.link}>{objLink.text}</a></li>)\r\n                })\r\n            }\r\n        </Ul>\r\n    )\r\n}\r\n\r\nexport default RightNav","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport RightNav from './RightNav';\r\n\r\nconst StyledBurger = styled.div`\r\n  width: 2rem;\r\n  height: 2rem;\r\n  position: fixed;\r\n  top: 15px;\r\n  right: 20px;\r\n  z-index: 20;\r\n  display: none;\r\n  @media (max-width: 768px) {\r\n    display: flex;\r\n    justify-content: space-around;\r\n    flex-flow: column nowrap;\r\n  }\r\n  div {\r\n    width: 2rem;\r\n    height: 0.25rem;\r\n    background-color: ${({ open }) => open ? '#ccc' : '#333'};\r\n    border-radius: 10px;\r\n    transform-origin: 1px;\r\n    transition: all 0.3s linear;\r\n    &:nth-child(1) {\r\n      transform: ${({ open }) => open ? 'rotate(45deg)' : 'rotate(0)'};\r\n    }\r\n    &:nth-child(2) {\r\n      transform: ${({ open }) => open ? 'translateX(100%)' : 'translateX(0)'};\r\n      opacity: ${({ open }) => open ? 0 : 1};\r\n    }\r\n    &:nth-child(3) {\r\n      transform: ${({ open }) => open ? 'rotate(-45deg)' : 'rotate(0)'};\r\n    }\r\n  }\r\n`;\r\n\r\nconst Burger = () => {\r\n    const [open, setOpen] = useState(false)\r\n\r\n    return (\r\n        <>\r\n            <StyledBurger open={open} onClick={() => setOpen(!open)}>\r\n                <div />\r\n                <div />\r\n                <div />\r\n            </StyledBurger>\r\n            <RightNav open={open} />\r\n        </>\r\n    )\r\n}\r\nexport default Burger","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Burger from './Burger';\r\nimport logo from '../assets/logo.png';\r\n\r\nconst Nav = styled.nav`\r\n  width: 100%;\r\n  height: auto;\r\n  border-bottom: 2px solid #f1f1f1;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  .logo {\r\n    overflow: hidden;\r\n  }\r\n  .resize{\r\n    height: 55px;\r\n  }\r\n`\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <Nav>\r\n      <div className=\"logo\">\r\n        <img className=\"resize\" src={logo} alt=\"logo\" />\r\n      </div>\r\n      <Burger />\r\n    </Nav>\r\n  )\r\n}\r\n\r\nexport default Navbar","import React from 'react';\nimport '../App.css'\nimport logo from './assets/loader.png';\nimport Navbar from './Nav/Navbar';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <header className=\"App-header\">\n        <h1>\n          Coming Soon\n        </h1>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          LAPA eCommerce site\n      </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/loader.79941a31.png\";"],"sourceRoot":""}